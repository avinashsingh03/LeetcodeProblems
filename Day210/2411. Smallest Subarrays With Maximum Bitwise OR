class SegmentTree{
vector<int> t;
public:
    int n;
    SegmentTree(vector<int>& nums){
        n = nums.size();
        t.resize(4*n);
        build(nums , 1 , 0 , n-1);
    }
    int merge_val(int a , int b){
        return a|b;
    }
    void maintain(int o){
        t[o] = merge_val(t[o*2] , t[o*2+1]);
    }
    void build(vector<int>& nums , int o , int l , int r){
        if(l == r){
            t[o] = nums[l];
            return ;
        }
        int m = l + (r - l)/2;
        build(nums , o*2 , l , m);
        build(nums , o*2+1 , m+1 , r);
        maintain(o);
    }
    int query(int o , int l , int r , int ql , int qr){
        if(ql<=l && r<=qr)return t[o];

        int m = l + (r - l)/2;
        if(m >= qr)
            return query(o*2 , l , m , ql , qr);
        if(m < ql)
            return query(o*2+1 , m+1 , r , ql , qr);
        return merge_val(
            query(o*2 , l , m , ql , qr),
            query(o*2+1 , m+1 , r , ql , qr)
        );
    }
};
class Solution {
public:
    vector<int> smallestSubarrays(vector<int>& nums) {
        SegmentTree t(nums);    

        int n = nums.size();
        vector<int> ans(n);
        for(int i=0;i<n;i++){
            int x = nums[i] , MX = t.query(1 , 0 , n-1 , i , n-1);
            
            int left = i , right = n-1;
            while(left <= right){
                int mid = left + (right - left) / 2;
                if(t.query(1 , 0 , n-1 , i , mid) < MX){
                    left = mid + 1;
                }else{
                    right = mid - 1;
                }
            }
            ans[i] = left - i + 1;
        }
        return ans;
    }
};
